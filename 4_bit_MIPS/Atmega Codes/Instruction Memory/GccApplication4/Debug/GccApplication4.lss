
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ea  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053a  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020f  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000306  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000111  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#define F_CPU 1000000
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	a8 97       	sbiw	r28, 0x28	; 40
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	MCUCSR= (1<< JTD);
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	84 bf       	out	0x34, r24	; 52
	MCUCSR= (1<< JTD);
  9a:	84 bf       	out	0x34, r24	; 52

	unsigned int instruction_ara [] = {0x0023,0x803e,0xe231,0x9234,0x5135,0x7323,0xa331,0x2341,0xd140,0x1441,0x6334,0xd130,0xc131,0xa552,0xf531,0x1551,0x3225,0xf324,0xd140,0xb138};
  9c:	88 e2       	ldi	r24, 0x28	; 40
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	de 01       	movw	r26, r28
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	01 90       	ld	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	8a 95       	dec	r24
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
	unsigned int instruction;
	unsigned char address,x,y,c=0,d=0;
	DDRB=0x00;
  ae:	17 ba       	out	0x17, r1	; 23
	DDRC=0xff;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
  b4:	81 bb       	out	0x11, r24	; 17
	
	
	while (1)
	{
		address=PINB;
  b6:	e6 b3       	in	r30, 0x16	; 22
		instruction=instruction_ara[address];
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	8c 0f       	add	r24, r28
  c4:	9d 1f       	adc	r25, r29
  c6:	e8 0f       	add	r30, r24
  c8:	f9 1f       	adc	r31, r25
  ca:	80 81       	ld	r24, Z
  cc:	91 81       	ldd	r25, Z+1	; 0x01
		x=instruction;
		y=instruction>>8;
		c=(y&(0xf0))|(x&(0x0f));
  ce:	39 2f       	mov	r19, r25
  d0:	30 7f       	andi	r19, 0xF0	; 240
  d2:	28 2f       	mov	r18, r24
  d4:	2f 70       	andi	r18, 0x0F	; 15
  d6:	23 2b       	or	r18, r19
		d=(y&(0x0f))|(x&(0xf0));
  d8:	9f 70       	andi	r25, 0x0F	; 15
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	89 2b       	or	r24, r25
		
		PORTC=c;
  de:	25 bb       	out	0x15, r18	; 21
		PORTD=d;
  e0:	82 bb       	out	0x12, r24	; 18
  e2:	e9 cf       	rjmp	.-46     	; 0xb6 <main+0x34>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
