
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ec  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000375  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000292  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 83 00 	call	0x106	; 0x106 <main>
  64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <btoi>:
#include <avr/io.h>
#include <util/delay.h>

int btoi(char c){
	int a=0;
	if(c==0x01){
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	f1 f0       	breq	.+60     	; 0xac <btoi+0x40>
		a=1;
	}
	else if(c==0x02){
  70:	82 30       	cpi	r24, 0x02	; 2
  72:	f9 f0       	breq	.+62     	; 0xb2 <btoi+0x46>
		a=2;
	}
	else if(c==0x03){
  74:	83 30       	cpi	r24, 0x03	; 3
  76:	01 f1       	breq	.+64     	; 0xb8 <btoi+0x4c>
		a=3;
	}
	
	else if(c==0x04){
  78:	84 30       	cpi	r24, 0x04	; 4
  7a:	09 f1       	breq	.+66     	; 0xbe <btoi+0x52>
		a=4;
	}
	
	else if(c==0x05){
  7c:	85 30       	cpi	r24, 0x05	; 5
  7e:	11 f1       	breq	.+68     	; 0xc4 <btoi+0x58>
		a=5;
	}
	
	else if(c==0x06){
  80:	86 30       	cpi	r24, 0x06	; 6
  82:	19 f1       	breq	.+70     	; 0xca <btoi+0x5e>
		a=6;
	}
	else if(c==0x07){
  84:	87 30       	cpi	r24, 0x07	; 7
  86:	21 f1       	breq	.+72     	; 0xd0 <btoi+0x64>
		a=7;
	}
	else if(c==0x08){
  88:	88 30       	cpi	r24, 0x08	; 8
  8a:	29 f1       	breq	.+74     	; 0xd6 <btoi+0x6a>
		a=8;
	}
	else if(c==0x09){
  8c:	89 30       	cpi	r24, 0x09	; 9
  8e:	31 f1       	breq	.+76     	; 0xdc <btoi+0x70>
		a=9;
	}
	else if(c==0x0A){
  90:	8a 30       	cpi	r24, 0x0A	; 10
  92:	39 f1       	breq	.+78     	; 0xe2 <btoi+0x76>
		a=10;
	}
	else if(c==0x0B){
  94:	8b 30       	cpi	r24, 0x0B	; 11
  96:	41 f1       	breq	.+80     	; 0xe8 <btoi+0x7c>
		a=11;
	}
	else if(c==0x0C){
  98:	8c 30       	cpi	r24, 0x0C	; 12
  9a:	49 f1       	breq	.+82     	; 0xee <btoi+0x82>
		a=12;
	}
	else if(c==0x0D){
  9c:	8d 30       	cpi	r24, 0x0D	; 13
  9e:	51 f1       	breq	.+84     	; 0xf4 <btoi+0x88>
		a=13;
	}
	else if(c==0x0E){
  a0:	8e 30       	cpi	r24, 0x0E	; 14
  a2:	59 f1       	breq	.+86     	; 0xfa <btoi+0x8e>
		a=14;
	}
	else if(c==0x0E){
  a4:	69 f1       	breq	.+90     	; 0x100 <btoi+0x94>

#include <avr/io.h>
#include <util/delay.h>

int btoi(char c){
	int a=0;
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret
	if(c==0x01){
		a=1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	08 95       	ret
	}
	else if(c==0x02){
		a=2;
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret
	}
	else if(c==0x03){
		a=3;
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret
	}
	
	else if(c==0x04){
		a=4;
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret
	}
	
	else if(c==0x05){
		a=5;
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	08 95       	ret
	}
	
	else if(c==0x06){
		a=6;
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	08 95       	ret
	}
	else if(c==0x07){
		a=7;
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret
	}
	else if(c==0x08){
		a=8;
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret
	}
	else if(c==0x09){
		a=9;
  dc:	89 e0       	ldi	r24, 0x09	; 9
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret
	}
	else if(c==0x0A){
		a=10;
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret
	}
	else if(c==0x0B){
		a=11;
  e8:	8b e0       	ldi	r24, 0x0B	; 11
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret
	}
	else if(c==0x0C){
		a=12;
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret
	}
	else if(c==0x0D){
		a=13;
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	08 95       	ret
	}
	else if(c==0x0E){
		a=14;
  fa:	8e e0       	ldi	r24, 0x0E	; 14
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret
	}
	else if(c==0x0E){
		a=15;
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	90 e0       	ldi	r25, 0x00	; 0
	}
	return a;
}
 104:	08 95       	ret

00000106 <main>:

int main(void)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	60 97       	sbiw	r28, 0x10	; 16
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
	MCUCSR = (1<<JTD);
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD); 
 11e:	84 bf       	out	0x34, r24	; 52
	DDRA= 0X00;
 120:	1a ba       	out	0x1a, r1	; 26
	DDRB= 0XF0;
 122:	80 ef       	ldi	r24, 0xF0	; 240
 124:	87 bb       	out	0x17, r24	; 23
	DDRD= 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	81 bb       	out	0x11, r24	; 17
	unsigned char data[16],r2,wrData,AluResult,mWr,mRead,m_Reg;
	unsigned char c,in;
    while (1) 
    {
			
			c=PINA;
 12a:	89 b3       	in	r24, 0x19	; 25
			AluResult=(c&0x0F);
 12c:	28 2f       	mov	r18, r24
 12e:	2f 70       	andi	r18, 0x0F	; 15
 130:	f2 2e       	mov	r15, r18
			mWr=(c&0x10)>>4;
 132:	28 2f       	mov	r18, r24
 134:	20 71       	andi	r18, 0x10	; 16
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	35 95       	asr	r19
 13a:	27 95       	ror	r18
 13c:	35 95       	asr	r19
 13e:	27 95       	ror	r18
 140:	35 95       	asr	r19
 142:	27 95       	ror	r18
 144:	35 95       	asr	r19
 146:	27 95       	ror	r18
 148:	02 2f       	mov	r16, r18
			mRead=(c&0x20)>>5;
 14a:	28 2f       	mov	r18, r24
 14c:	20 72       	andi	r18, 0x20	; 32
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	35 95       	asr	r19
 152:	27 95       	ror	r18
 154:	35 95       	asr	r19
 156:	27 95       	ror	r18
 158:	35 95       	asr	r19
 15a:	27 95       	ror	r18
 15c:	35 95       	asr	r19
 15e:	27 95       	ror	r18
 160:	35 95       	asr	r19
 162:	27 95       	ror	r18
			m_Reg=(c&0x40)>>6;
 164:	48 2f       	mov	r20, r24
 166:	40 74       	andi	r20, 0x40	; 64
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	04 2e       	mov	r0, r20
 16c:	45 2f       	mov	r20, r21
 16e:	00 0c       	add	r0, r0
 170:	44 1f       	adc	r20, r20
 172:	55 0b       	sbc	r21, r21
 174:	00 0c       	add	r0, r0
 176:	44 1f       	adc	r20, r20
 178:	55 1f       	adc	r21, r21
			in=(c&0x80)>>7;
 17a:	18 2f       	mov	r17, r24
 17c:	11 1f       	adc	r17, r17
 17e:	11 27       	eor	r17, r17
 180:	11 1f       	adc	r17, r17
			c=PINB;
 182:	86 b3       	in	r24, 0x16	; 22
			r2=(c&0x0F);
 184:	8f 70       	andi	r24, 0x0F	; 15
 186:	e8 2e       	mov	r14, r24
			
			wrData=AluResult;
			if(mRead&0x01 && m_Reg&0x01){
 188:	20 ff       	sbrs	r18, 0
 18a:	0e c0       	rjmp	.+28     	; 0x1a8 <main+0xa2>
 18c:	40 ff       	sbrs	r20, 0
 18e:	0e c0       	rjmp	.+28     	; 0x1ac <main+0xa6>
				wrData=data[btoi(AluResult)];
 190:	8f 2d       	mov	r24, r15
 192:	0e 94 36 00 	call	0x6c	; 0x6c <btoi>
 196:	e1 e0       	ldi	r30, 0x01	; 1
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	8e 0f       	add	r24, r30
 1a0:	9f 1f       	adc	r25, r31
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <main+0xa8>
			m_Reg=(c&0x40)>>6;
			in=(c&0x80)>>7;
			c=PINB;
			r2=(c&0x0F);
			
			wrData=AluResult;
 1a8:	8f 2d       	mov	r24, r15
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <main+0xa8>
 1ac:	8f 2d       	mov	r24, r15
			if(mRead&0x01 && m_Reg&0x01){
				wrData=data[btoi(AluResult)];
			}
			PORTD =wrData;
 1ae:	82 bb       	out	0x12, r24	; 18
			
			if(!(in)){
 1b0:	11 11       	cpse	r17, r1
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <main+0xc8>
				if(mWr){
 1b4:	00 23       	and	r16, r16
 1b6:	59 f0       	breq	.+22     	; 0x1ce <main+0xc8>
					data[btoi(AluResult)]=r2;
 1b8:	8f 2d       	mov	r24, r15
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <btoi>
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	2c 0f       	add	r18, r28
 1c4:	3d 1f       	adc	r19, r29
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	fc 01       	movw	r30, r24
 1cc:	e0 82       	st	Z, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	ff e7       	ldi	r31, 0x7F	; 127
 1d0:	2a e1       	ldi	r18, 0x1A	; 26
 1d2:	36 e0       	ldi	r19, 0x06	; 6
 1d4:	f1 50       	subi	r31, 0x01	; 1
 1d6:	20 40       	sbci	r18, 0x00	; 0
 1d8:	30 40       	sbci	r19, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xce>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xd8>
 1de:	00 00       	nop
 1e0:	a4 cf       	rjmp	.-184    	; 0x12a <main+0x24>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
