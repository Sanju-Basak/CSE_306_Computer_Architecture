
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074d  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f9  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000272  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <btoi>:
#define F_CPU 1000000
#include <util/delay.h>

int btoi(char c){
	int a=0;
	if(c==0x01){
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	59 f0       	breq	.+22     	; 0x86 <btoi+0x1a>
		a=1;
		
	}
	else if(c==0x02){
  70:	82 30       	cpi	r24, 0x02	; 2
  72:	61 f0       	breq	.+24     	; 0x8c <btoi+0x20>
		a=2;
	}
	else if(c==0x03){
  74:	83 30       	cpi	r24, 0x03	; 3
  76:	69 f0       	breq	.+26     	; 0x92 <btoi+0x26>
		a=3;
	}
	
	else if(c==0x04){
  78:	84 30       	cpi	r24, 0x04	; 4
  7a:	71 f0       	breq	.+28     	; 0x98 <btoi+0x2c>
		a=4;
	}
	
	else if(c==0x05){
  7c:	85 30       	cpi	r24, 0x05	; 5
  7e:	79 f0       	breq	.+30     	; 0x9e <btoi+0x32>
#include <avr/io.h>
#define F_CPU 1000000
#include <util/delay.h>

int btoi(char c){
	int a=0;
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret
	if(c==0x01){
		a=1;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret
		
	}
	else if(c==0x02){
		a=2;
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	08 95       	ret
	}
	else if(c==0x03){
		a=3;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret
	}
	
	else if(c==0x04){
		a=4;
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret
	}
	
	else if(c==0x05){
		a=5;
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	90 e0       	ldi	r25, 0x00	; 0
	}
	return a;
}
  a2:	08 95       	ret

000000a4 <main>:

int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x8>
  ac:	00 d0       	rcall	.+0      	; 0xae <main+0xa>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	MCUCSR= (1<< JTD);
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	84 bf       	out	0x34, r24	; 52
	MCUCSR= (1<< JTD);
  b6:	84 bf       	out	0x34, r24	; 52
	//pa7 in
	//pc0-3 data2	--output
	//pc4-7data1    --output
	//pd4-7 writedata  --input
	//pd0-3 reg#3 output
	DDRA=0x00;
  b8:	1a ba       	out	0x1a, r1	; 26
	DDRB=0x00;
  ba:	17 ba       	out	0x17, r1	; 23
	DDRC=0xff;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	84 bb       	out	0x14, r24	; 20
	DDRD=0x0f;
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	81 bb       	out	0x11, r24	; 17
	
	
	
	for(int i=0;i<6;i++){
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	08 c0       	rjmp	.+16     	; 0xda <main+0x36>
		reg[i]=0x00;
  ca:	e1 e0       	ldi	r30, 0x01	; 1
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ec 0f       	add	r30, r28
  d0:	fd 1f       	adc	r31, r29
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	10 82       	st	Z, r1
	DDRC=0xff;
	DDRD=0x0f;
	
	
	
	for(int i=0;i<6;i++){
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	86 30       	cpi	r24, 0x06	; 6
  dc:	91 05       	cpc	r25, r1
  de:	ac f3       	brlt	.-22     	; 0xca <main+0x26>
	
	
	
	while (1)
	{
		b=PINB;
  e0:	86 b3       	in	r24, 0x16	; 22
		reg1=b&(0x0f); //lower 4 bit
  e2:	98 2f       	mov	r25, r24
  e4:	9f 70       	andi	r25, 0x0F	; 15
		reg2=(b>>4)&(0x0f); // higher 4 bit
  e6:	82 95       	swap	r24
  e8:	8f 70       	andi	r24, 0x0F	; 15
		
		value1=reg[reg1];
  ea:	e1 e0       	ldi	r30, 0x01	; 1
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ec 0f       	add	r30, r28
  f0:	fd 1f       	adc	r31, r29
  f2:	e9 0f       	add	r30, r25
  f4:	f1 1d       	adc	r31, r1
  f6:	90 81       	ld	r25, Z
		value2=reg[reg2];
  f8:	e1 e0       	ldi	r30, 0x01	; 1
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	ec 0f       	add	r30, r28
  fe:	fd 1f       	adc	r31, r29
 100:	e8 0f       	add	r30, r24
 102:	f1 1d       	adc	r31, r1
 104:	40 81       	ld	r20, Z
		PORTC=(value1<<4)|value2;//1 upper bit 2 lower bit
 106:	50 e1       	ldi	r21, 0x10	; 16
 108:	95 9f       	mul	r25, r21
 10a:	90 01       	movw	r18, r0
 10c:	11 24       	eor	r1, r1
 10e:	24 2b       	or	r18, r20
 110:	25 bb       	out	0x15, r18	; 21
		
		data_in=PIND;
 112:	90 b3       	in	r25, 0x10	; 16
		data_in=data_in>>4;//aluresult or write data
 114:	09 2f       	mov	r16, r25
 116:	02 95       	swap	r16
 118:	0f 70       	andi	r16, 0x0F	; 15
		
		
		a=PINA;
 11a:	99 b3       	in	r25, 0x19	; 25
		reg3=a&(0x0f); // lower half
 11c:	19 2f       	mov	r17, r25
 11e:	1f 70       	andi	r17, 0x0F	; 15
		
		reg_dst=(a&(0x20))>>5; // pin5
 120:	29 2f       	mov	r18, r25
 122:	20 72       	andi	r18, 0x20	; 32
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	a9 01       	movw	r20, r18
 128:	55 95       	asr	r21
 12a:	47 95       	ror	r20
 12c:	55 95       	asr	r21
 12e:	47 95       	ror	r20
 130:	55 95       	asr	r21
 132:	47 95       	ror	r20
 134:	55 95       	asr	r21
 136:	47 95       	ror	r20
 138:	55 95       	asr	r21
 13a:	47 95       	ror	r20
		reg_write=(a&(0x40))>>6; //pin6
 13c:	29 2f       	mov	r18, r25
 13e:	20 74       	andi	r18, 0x40	; 64
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	23 2f       	mov	r18, r19
 146:	00 0c       	add	r0, r0
 148:	22 1f       	adc	r18, r18
 14a:	33 0b       	sbc	r19, r19
 14c:	00 0c       	add	r0, r0
 14e:	22 1f       	adc	r18, r18
 150:	33 1f       	adc	r19, r19
		in =(a&(0x80))>>7;  //pin7
		
		if(!(in)){//when in 1 (button press) only then writes the data to the register
 152:	99 23       	and	r25, r25
 154:	e4 f0       	brlt	.+56     	; 0x18e <main+0xea>
			if(reg_write&(0x01)){
 156:	20 ff       	sbrs	r18, 0
 158:	1a c0       	rjmp	.+52     	; 0x18e <main+0xea>
				char d;
				if(reg_dst&(0x01)){
 15a:	40 ff       	sbrs	r20, 0
 15c:	0d c0       	rjmp	.+26     	; 0x178 <main+0xd4>
					d=reg3&0x07;//cut off the 4th bit of reg3
					reg[btoi(d)]=data_in;
 15e:	89 2f       	mov	r24, r25
 160:	87 70       	andi	r24, 0x07	; 7
 162:	0e 94 36 00 	call	0x6c	; 0x6c <btoi>
 166:	e1 e0       	ldi	r30, 0x01	; 1
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	8e 0f       	add	r24, r30
 170:	9f 1f       	adc	r25, r31
 172:	fc 01       	movw	r30, r24
 174:	00 83       	st	Z, r16
 176:	0b c0       	rjmp	.+22     	; 0x18e <main+0xea>
				}
				else{
					d=reg2&0x07;//cut off the 4th bit of reg2
					reg[btoi(d)]=data_in;
 178:	87 70       	andi	r24, 0x07	; 7
 17a:	0e 94 36 00 	call	0x6c	; 0x6c <btoi>
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	2c 0f       	add	r18, r28
 184:	3d 1f       	adc	r19, r29
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
 18a:	fc 01       	movw	r30, r24
 18c:	00 83       	st	Z, r16
			data_out=reg[reg3];
		}
		else{
			data_out=0;
		}*/
		data_out=reg[reg3];
 18e:	e1 e0       	ldi	r30, 0x01	; 1
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ec 0f       	add	r30, r28
 194:	fd 1f       	adc	r31, r29
 196:	e1 0f       	add	r30, r17
 198:	f1 1d       	adc	r31, r1
 19a:	80 81       	ld	r24, Z
		PORTD=data_out;
 19c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	ff e3       	ldi	r31, 0x3F	; 63
 1a0:	22 e4       	ldi	r18, 0x42	; 66
 1a2:	3f e0       	ldi	r19, 0x0F	; 15
 1a4:	f1 50       	subi	r31, 0x01	; 1
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	30 40       	sbci	r19, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x100>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x10a>
 1ae:	00 00       	nop
 1b0:	97 cf       	rjmp	.-210    	; 0xe0 <main+0x3c>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
